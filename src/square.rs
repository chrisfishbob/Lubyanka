use crate::board::BoardError;

#[derive(Debug, PartialEq, Eq)]
pub enum Square {
    A1 = 0,
    B1 = 1,
    C1 = 2,
    D1 = 3,
    E1 = 4,
    F1 = 5,
    G1 = 6,
    H1 = 7,
    A2 = 8,
    B2 = 9,
    C2 = 10,
    D2 = 11,
    E2 = 12,
    F2 = 13,
    G2 = 14,
    H2 = 15,
    A3 = 16,
    B3 = 17,
    C3 = 18,
    D3 = 19,
    E3 = 20,
    F3 = 21,
    G3 = 22,
    H3 = 23,
    A4 = 24,
    B4 = 25,
    C4 = 26,
    D4 = 27,
    E4 = 28,
    F4 = 29,
    G4 = 30,
    H4 = 31,
    A5 = 32,
    B5 = 33,
    C5 = 34,
    D5 = 35,
    E5 = 36,
    F5 = 37,
    G5 = 38,
    H5 = 39,
    A6 = 40,
    B6 = 41,
    C6 = 42,
    D6 = 43,
    E6 = 44,
    F6 = 45,
    G6 = 46,
    H6 = 47,
    A7 = 48,
    B7 = 49,
    C7 = 50,
    D7 = 51,
    E7 = 52,
    F7 = 53,
    G7 = 54,
    H7 = 55,
    A8 = 56,
    B8 = 57,
    C8 = 58,
    D8 = 59,
    E8 = 60,
    F8 = 61,
    G8 = 62,
    H8 = 63
}

impl Square {
    pub fn from_algebraic_notation(s: &str) -> Result<Self, BoardError> {
        match s {
            "a1" => Ok(Square::A1),
            "b1" => Ok(Square::B1),
            "c1" => Ok(Square::C1),
            "d1" => Ok(Square::D1),
            "e1" => Ok(Square::E1),
            "f1" => Ok(Square::F1),
            "g1" => Ok(Square::G1),
            "h1" => Ok(Square::H1),
            "a2" => Ok(Square::A2),
            "b2" => Ok(Square::B2),
            "c2" => Ok(Square::C2),
            "d2" => Ok(Square::D2),
            "e2" => Ok(Square::E2),
            "f2" => Ok(Square::F2),
            "g2" => Ok(Square::G2),
            "h2" => Ok(Square::H2),
            "a3" => Ok(Square::A3),
            "b3" => Ok(Square::B3),
            "c3" => Ok(Square::C3),
            "d3" => Ok(Square::D3),
            "e3" => Ok(Square::E3),
            "f3" => Ok(Square::F3),
            "g3" => Ok(Square::G3),
            "h3" => Ok(Square::H3),
            "a4" => Ok(Square::A4),
            "b4" => Ok(Square::B4),
            "c4" => Ok(Square::C4),
            "d4" => Ok(Square::D4),
            "e4" => Ok(Square::E4),
            "f4" => Ok(Square::F4),
            "g4" => Ok(Square::G4),
            "h4" => Ok(Square::H4),
            "a5" => Ok(Square::A5),
            "b5" => Ok(Square::B5),
            "c5" => Ok(Square::C5),
            "d5" => Ok(Square::D5),
            "e5" => Ok(Square::E5),
            "f5" => Ok(Square::F5),
            "g5" => Ok(Square::G5),
            "h5" => Ok(Square::H5),
            "a6" => Ok(Square::A6),
            "b6" => Ok(Square::B6),
            "c6" => Ok(Square::C6),
            "d6" => Ok(Square::D6),
            "e6" => Ok(Square::E6),
            "f6" => Ok(Square::F6),
            "g6" => Ok(Square::G6),
            "h6" => Ok(Square::H6),
            "a7" => Ok(Square::A7),
            "b7" => Ok(Square::B7),
            "c7" => Ok(Square::C7),
            "d7" => Ok(Square::D7),
            "e7" => Ok(Square::E7),
            "f7" => Ok(Square::F7),
            "g7" => Ok(Square::G7),
            "h7" => Ok(Square::H7),
            "a8" => Ok(Square::A8),
            "b8" => Ok(Square::B8),
            "c8" => Ok(Square::C8),
            "d8" => Ok(Square::D8),
            "e8" => Ok(Square::E8),
            "f8" => Ok(Square::F8),
            "g8" => Ok(Square::G8),
            "h8" => Ok(Square::H8),
            square_string => Err(BoardError::new(format!("Invalid square string: {square_string}").as_str())),
        }
    }
}


